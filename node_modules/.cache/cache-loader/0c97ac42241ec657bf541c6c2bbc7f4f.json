{"remainingRequest":"/Users/anubz/Documents/Ativadores/ativador fetch carrosell/node_modules/babel-loader/lib/index.js!/Users/anubz/Documents/Ativadores/ativador fetch carrosell/node_modules/vue-loader/lib/selector.js?type=script&index=0!/Users/anubz/Documents/Ativadores/ativador fetch carrosell/src/components/comps/AutocompleteDropdown.vue","dependencies":[{"path":"/Users/anubz/Documents/Ativadores/ativador fetch carrosell/src/components/comps/AutocompleteDropdown.vue","mtime":1500984622000},{"path":"/Users/anubz/Documents/Ativadores/ativador fetch carrosell/package.json","mtime":1522335527175},{"path":"/Users/anubz/Documents/Ativadores/ativador fetch carrosell/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/anubz/Documents/Ativadores/ativador fetch carrosell/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Users/anubz/Documents/Ativadores/ativador fetch carrosell/node_modules/vue-loader/lib/selector.js","mtime":1520395331000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es7.object.entries\";\nimport \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.symbol\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    'value': [String, Number, Boolean, Function, Object, Array, Symbol],\n    'options': {\n      type: Object,\n      required: true\n    },\n    'placeholder': {\n      type: String,\n      default: 'Enter an item name to search'\n    }\n  },\n  data: function data() {\n    return {\n      searchText: '',\n      selectedOption: null,\n      open: false,\n      highlightIndex: 0,\n      lastSearchText: ''\n    };\n  },\n  mounted: function mounted() {\n    this.updateComponentWithValue(this.value);\n  },\n  methods: {\n    setOpen: function setOpen(isOpen) {\n      this.open = isOpen;\n\n      if (this.open) {\n        this.$refs.search.focus();\n        this.lastSearchText = this.searchText;\n        this.searchText = '';\n      } else if (this.searchText.trim() === '') {\n        this.searchText = this.lastSearchText;\n      }\n    },\n    updateComponentWithValue: function updateComponentWithValue(newValue) {\n      if (Object.values(this.options).indexOf(newValue) > -1) {\n        // Find the matching text for the supplied option value\n        for (var text in this.options) {\n          if (this.options.hasOwnProperty(text)) {\n            if (this.options[text] === newValue) {\n              this.searchText = text;\n            }\n          }\n        }\n      }\n    },\n    searchChanged: function searchChanged() {\n      if (!this.open) {\n        this.open = true;\n      }\n\n      this.highlightIndex = 0;\n    },\n    suggestionSelected: function suggestionSelected(suggestion) {\n      this.open = false;\n      this.searchText = suggestion[0];\n      this.$emit('input', suggestion[1]);\n    },\n    up: function up() {\n      if (this.open) {\n        if (this.highlightIndex > 0) {\n          this.highlightIndex--;\n        }\n      } else {\n        this.setOpen(true);\n      }\n    },\n    down: function down() {\n      if (this.open) {\n        if (this.highlightIndex < this.matches.length - 1) {\n          this.highlightIndex++;\n        }\n      } else {\n        this.setOpen(true);\n      }\n    }\n  },\n  computed: {\n    matches: function matches() {\n      var _this = this;\n\n      return Object.entries(this.options).filter(function (option) {\n        var optionText = option[0].toUpperCase();\n        return optionText.match(_this.searchText.toUpperCase());\n      });\n    }\n  },\n  watch: {\n    value: function value(newValue) {\n      this.updateComponentWithValue(newValue);\n    }\n  }\n};",{"version":3,"sources":["AutocompleteDropdown.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;gEAGA;;YAEA;gBACA,AACA;AAHA;;YAKA;eACA,AACA,AAEA;AALA;AANA;wBAYA;;kBAEA;sBACA;YACA;sBACA;sBACA,AACA;AANA;AAQA;8BACA;uCACA;AAEA;;sCAEA;kBAEA;;qBACA;0BACA;mCACA;0BACA;gDACA;+BACA;AACA;AAEA;0EACA;8DACA;AACA;uCACA;iDACA;iDACA;gCACA;AACA;AACA;AACA;AACA;AAEA;4CACA;sBACA;oBACA;AAEA;;4BACA;AAEA;gEACA;kBACA;mCACA;qCACA;AAEA;sBACA;qBACA;qCACA;eACA;AACA;aACA;qBACA;AACA;AAEA;0BACA;qBACA;2DACA;eACA;AACA;aACA;qBACA;AACA;AACA,AAEA;AA5DA;;;AA8DA;;mEACA;mCACA;iDACA;AACA;AACA,AAEA;AARA;;oCAUA;oCACA;AACA,AACA;AAJA;AAjGA","file":"AutocompleteDropdown.vue","sourceRoot":"src/components/comps","sourcesContent":["<template>\n  <div class=\"dropdown\" :class=\"{'open' : open}\">\n    <input type=\"text\"\n      ref=\"search\"\n      :placeholder=\"placeholder\"\n      v-model=\"searchText\"\n      @input=\"searchChanged\"\n      @keydown.enter=\"suggestionSelected(matches[highlightIndex])\"\n      @keydown.down=\"down\"\n      @keydown.up=\"up\"\n      @keydown.esc=\"setOpen(false)\"\n      @blur=\"setOpen(false)\"\n    ></input>\n\n    <a class=\"toggle\" @mousedown.prevent @click=\"setOpen(!open)\">\n      <span class=\"arrow-up\">▲</span>\n      <span class=\"arrow-down\">▼</span>\n    </a>\n\n    <ul class=\"suggestion-list\">\n      <li v-for=\"(suggestion, index) in matches\"\n        :class=\"{'active' : index === highlightIndex}\"\n        @mousedown.prevent\n        @click=\"suggestionSelected(suggestion)\"\n      >\n        {{ suggestion[0] }}\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  props: {\n    'value': [String, Number, Boolean, Function, Object, Array, Symbol],\n    'options': {\n      type: Object,\n      required: true\n    },\n    'placeholder': {\n      type: String,\n      default: 'Enter an item name to search'\n    }\n  },\n\n  data () {\n    return {\n      searchText: '',\n      selectedOption: null,\n      open: false,\n      highlightIndex: 0,\n      lastSearchText: ''\n    }\n  },\n\n  mounted () {\n    this.updateComponentWithValue(this.value)\n  },\n\n  methods: {\n    setOpen (isOpen) {\n      this.open = isOpen\n\n      if (this.open) {\n        this.$refs.search.focus()\n        this.lastSearchText = this.searchText\n        this.searchText = ''\n      } else if (this.searchText.trim() === '') {\n        this.searchText = this.lastSearchText\n      }\n    },\n\n    updateComponentWithValue (newValue) {\n      if (Object.values(this.options).indexOf(newValue) > -1) {\n        // Find the matching text for the supplied option value\n        for (var text in this.options) {\n          if (this.options.hasOwnProperty(text)) {\n            if (this.options[text] === newValue) {\n              this.searchText = text\n            }\n          }\n        }\n      }\n    },\n\n    searchChanged () {\n      if (!this.open) {\n        this.open = true\n      }\n\n      this.highlightIndex = 0\n    },\n\n    suggestionSelected (suggestion) {\n      this.open = false\n      this.searchText = suggestion[0]\n      this.$emit('input', suggestion[1])\n    },\n\n    up () {\n      if (this.open) {\n        if (this.highlightIndex > 0) {\n          this.highlightIndex--\n        }\n      } else {\n        this.setOpen(true)\n      }\n    },\n\n    down () {\n      if (this.open) {\n        if (this.highlightIndex < this.matches.length - 1) {\n          this.highlightIndex++\n        }\n      } else {\n        this.setOpen(true)\n      }\n    }\n  },\n\n  computed: {\n    matches () {\n      return Object.entries(this.options).filter((option) => {\n        var optionText = option[0].toUpperCase()\n        return optionText.match(this.searchText.toUpperCase())\n      })\n    }\n  },\n\n  watch: {\n    value: function (newValue) {\n      this.updateComponentWithValue(newValue)\n    }\n  }\n}\n\n</script>\n\n<style scoped>\n\n.dropdown {\n  display: inline-block;\n  position: relative;\n}\n\n.dropdown.open .suggestion-list {\n  display: block;\n}\n\n.dropdown .suggestion-list {\n  display: none;\n}\n\n.toggle {\n  display: inline-block;\n  text-decoration: none;\n}\n\n.toggle .arrow-up {\n  display: none;\n}\n\n.open .toggle .arrow-up {\n  display: inline-block;\n}\n\n.open .toggle .arrow-down {\n  display: none;\n}\n\n.suggestion-list {\n  background-color: rgba(255, 255, 255, 0.95);\n  border: 1px solid #ddd;\n  list-style: none;\n  display: block;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  overflow: hidden;\n  position: absolute;\n  top: 20px;\n  left: 0;\n  z-index: 2;\n}\n\n.suggestion-list li {\n  cursor: pointer;\n}\n\n.suggestion-list li:hover {\n  color: #fff;\n  background-color: #ccc;\n}\n\n.active  {\n  color: #fff;\n  background-color: #42b983;\n}\n\n\n</style>\n"]}]}